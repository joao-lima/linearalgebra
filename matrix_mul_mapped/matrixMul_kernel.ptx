	.version 1.4
	.target sm_10, map_f64_to_f32
	// compiled with /usr/local/stow/cuda-2.3/open64/lib//be
	// nvopencc 2.3 built on 2009-07-30

	//-----------------------------------------------------------
	// Compiling /tmp/tmpxft_0000596a_00000000-7_matrixMul_kernel.cpp3.i (/tmp/ccBI#.ueCxeG)
	//-----------------------------------------------------------

	//-----------------------------------------------------------
	// Options:
	//-----------------------------------------------------------
	//  Target:ptx, ISA:sm_10, Endian:little, Pointer Size:64
	//  -O3	(Optimization level)
	//  -g0	(Debug level)
	//  -m2	(Report advisories)
	//-----------------------------------------------------------

	.file	1	"<command-line>"
	.file	2	"/tmp/tmpxft_0000596a_00000000-6_matrixMul_kernel.cudafe2.gpu"
	.file	3	"/usr/lib/gcc/x86_64-linux-gnu/4.4.4/include/stddef.h"
	.file	4	"/usr/local/include/crt/device_runtime.h"
	.file	5	"/usr/local/include/host_defines.h"
	.file	6	"/usr/local/include/builtin_types.h"
	.file	7	"/usr/local/include/device_types.h"
	.file	8	"/usr/local/include/driver_types.h"
	.file	9	"/usr/local/include/texture_types.h"
	.file	10	"/usr/local/include/vector_types.h"
	.file	11	"/usr/local/include/device_launch_parameters.h"
	.file	12	"/usr/local/include/crt/storage_class.h"
	.file	13	"/usr/include/bits/types.h"
	.file	14	"/usr/include/time.h"
	.file	15	"matrixMul_kernel.cu"
	.file	16	"/usr/local/include/common_functions.h"
	.file	17	"/usr/local/include/crt/func_macro.h"
	.file	18	"/usr/local/include/math_functions.h"
	.file	19	"/usr/local/include/device_functions.h"
	.file	20	"/usr/local/include/math_constants.h"
	.file	21	"/usr/local/include/sm_11_atomic_functions.h"
	.file	22	"/usr/local/include/sm_12_atomic_functions.h"
	.file	23	"/usr/local/include/sm_13_double_functions.h"
	.file	24	"/usr/local/include/common_types.h"
	.file	25	"/usr/local/include/texture_fetch_functions.h"
	.file	26	"/usr/local/include/math_functions_dbl_ptx1.h"


	.entry matrixMul (
		.param .u64 __cudaparm_matrixMul_C,
		.param .u64 __cudaparm_matrixMul_A,
		.param .u64 __cudaparm_matrixMul_B,
		.param .s32 __cudaparm_matrixMul_N)
	{
	.reg .u16 %rh<6>;
	.reg .u32 %r<23>;
	.reg .u64 %rd<16>;
	.reg .pred %p<4>;
	.loc	15	9	0
$LBB1_matrixMul:
	cvt.u32.u16 	%r1, %tid.x;
	cvt.u32.u16 	%r2, %tid.y;
	mov.u16 	%rh1, %ntid.x;
	mov.u16 	%rh2, %ctaid.x;
	mov.u16 	%rh3, %ntid.y;
	mov.u16 	%rh4, %ctaid.y;
	ld.param.s32 	%r3, [__cudaparm_matrixMul_N];
	mov.u32 	%r4, 0;
	setp.le.s32 	%p1, %r3, %r4;
	mov.s32 	%r5, 0;
	@%p1 bra 	$Lt_0_2306;
	mov.s32 	%r6, %r3;
	mul.wide.u16 	%r7, %rh3, %rh4;
	mul.wide.u16 	%r8, %rh1, %rh2;
	add.u32 	%r9, %r7, %r2;
	add.u32 	%r10, %r8, %r1;
	mul.lo.s32 	%r11, %r3, %r9;
	mov.s32 	%r12, %r11;
	add.s32 	%r13, %r11, %r3;
	cvt.s64.s32 	%rd1, %r3;
	mul.lo.u64 	%rd2, %rd1, 4;
	ld.param.u64 	%rd3, [__cudaparm_matrixMul_B];
	cvt.s64.s32 	%rd4, %r10;
	mul.lo.u64 	%rd5, %rd4, 4;
	add.u64 	%rd6, %rd3, %rd5;
	ld.param.u64 	%rd7, [__cudaparm_matrixMul_A];
	cvt.s64.s32 	%rd8, %r11;
	mul.lo.u64 	%rd9, %rd8, 4;
	add.u64 	%rd10, %rd7, %rd9;
	mov.s32 	%r14, %r6;
$Lt_0_1794:
 //<loop> Loop body line 9, nesting depth: 1, estimated iterations: unknown
	.loc	15	17	0
	ld.global.s32 	%r15, [%rd6+0];
	ld.global.s32 	%r16, [%rd10+0];
	mul.lo.s32 	%r17, %r15, %r16;
	add.s32 	%r5, %r5, %r17;
	add.s32 	%r12, %r12, 1;
	add.u64 	%rd10, %rd10, 4;
	add.u64 	%rd6, %rd2, %rd6;
	setp.ne.s32 	%p2, %r12, %r13;
	@%p2 bra 	$Lt_0_1794;
	bra.uni 	$Lt_0_1282;
$Lt_0_2306:
	mul.wide.u16 	%r18, %rh3, %rh4;
	mul.wide.u16 	%r19, %rh1, %rh2;
	add.u32 	%r20, %r18, %r2;
	add.u32 	%r10, %r19, %r1;
	mul.lo.s32 	%r11, %r3, %r20;
$Lt_0_1282:
	.loc	15	18	0
	ld.param.u64 	%rd11, [__cudaparm_matrixMul_C];
	add.s32 	%r21, %r11, %r10;
	cvt.s64.s32 	%rd12, %r21;
	mul.lo.u64 	%rd13, %rd12, 4;
	add.u64 	%rd14, %rd11, %rd13;
	st.global.s32 	[%rd14+0], %r5;
	.loc	15	19	0
	exit;
$LDWend_matrixMul:
	} // matrixMul

